/* Create By Pioupia https://github.com/pioupia/auto-input-a2f/ | MIT License */
class AutoInput{#t;#e;#a;#i;#n;#s;#o;#r;#l;#h;constructor(t={}){this.#t=t.autoEnd||!0,this.#e=t.selectAuto||!0,this.#a=t.canPast||!0,this.#i=t.createAuto||!1,this.#n=t.parent||document.getElementById("a2fParent")||document.querySelector("[data-parent-a2f]"),this.#s=t.validate||document.querySelector("[data-button-validate]"),this.#o=t.onCreate,this.#r=null,this.#c()}#u(){for(let t=0;t<6;t++){let e=document.createElement("input");if(e.setAttribute("data-a2f",""),e.setAttribute("type","text"),e.setAttribute("placeholder","0"),e.setAttribute("required",""),this.#o instanceof Function&&(e=this.#o(e,t)||e),3==t){let e=document.createElement("span");e.textContent="-",e=this.#o(e,t),e&&this.#n.appendChild(e)}this.#n.appendChild(e)}}#c(){if(this.#i&&!this.#n)throw new Error("The parent does not exist. Please fill the parent option, or create an element with the a2fParent id or the data-parent-a2f attribute.");if(this.#i&&this.#u(),this.#r=(this.#n||document).querySelectorAll("[data-a2f]"),!(this.#r.length<2)){this.#e&&this.#r[0].focus();for(let t=0;t<this.#r.length;t++){const e=this.#r[t];e.onpaste=t=>this.#d(t),e.onkeypress=t=>t.preventDefault(),e.onkeyup=t=>this.#p(t)}}}#b(){for(const t of this.#r.values())if(!t.value)return this.#l=0,!1;this.#l=Date.now(),setTimeout((()=>{if(!(this.#l&&this.#l+400>Date.now())&&this.#t){if(this.#h instanceof Function)return this.#h(this.getCode());this.#s?.click()}}),400)}#p(t){const{key:e,target:a}=t;switch(t.preventDefault(),e){case"Backspace":case"Delete":a.value="";case"ArrowLeft":let t=a.previousElementSibling;"SPAN"===t?.tagName&&(t=t.previousElementSibling),t?.focus();break;case"ArrowRight":let i=a.nextElementSibling;"SPAN"===i?.tagName&&(i=i.nextElementSibling),i?.focus();break;case"ArrowUp":this.#r.item(this.#r.length-1).focus();break;case"ArrowDown":this.#r[0].focus();break;default:if(isNaN(e))return;a.value=e,this.#p({key:"ArrowRight",target:a,preventDefault:()=>null}),this.#b()}}#d(t){if(!this.#a)return;t.stopPropagation(),t.preventDefault();const e=t.clipboardData||window.clipboardData;if(!e)return;const a=e.getData("Text"),i=a.length>this.#r.length?this.#r.length:a.length;for(let t=0;t<i;t++)isNaN(a[t])||(this.#r[t].value=a[t]);this.#b()}onValidate(t){this.#h=t}getCode(){let t="";return this.#r.forEach((e=>{t+=e.value})),t}removeEntries(){this.#r.forEach((t=>{t.value=""}))}}export{AutoInput};